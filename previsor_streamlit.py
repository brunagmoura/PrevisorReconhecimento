import streamlit as st
import pandas as pd
import joblib
import requests
from io import BytesIO

# Fun√ß√£o para carregar o modelo do Hugging Face
@st.cache_resource
def carregar_modelo():
    url = "https://huggingface.co/brunagmoura/previsor-reconhecimento/resolve/main/previsor_desastres.pkl"
    response = requests.get(url)
    if response.status_code == 200:
        modelo = joblib.load(BytesIO(response.content))
        return modelo
    else:
        st.error('Erro ao carregar o modelo do Hugging Face.')
        return None

# Configura√ß√µes de estilo
st.set_page_config(page_title="Previsor de Reconhecimento Federal de Desastres", page_icon="üö®", layout="centered")

# Carregar o modelo preditivo
modelo = carregar_modelo()

# Obter o melhor estimador do modelo BayesSearchCV
if modelo is not None:
    best_model = modelo.best_estimator_
    # Obter a lista de features
    colunas_modelo = best_model.feature_names_in_.tolist()
else:
    colunas_modelo = []

# Se√ß√£o explicativa
st.header("Sobre o Projeto")
st.markdown(
    """
    O reconhecimento federal de Situa√ß√£o de Emerg√™ncia ou Estado de Calamidade P√∫blica permite ao munic√≠pio acessar recursos federais para resposta e reconstru√ß√£o. 
    Este aplicativo permite prever se um desastre declarado por um munic√≠pio ser√° reconhecido federalmente como Situa√ß√£o de Emerg√™ncia ou Estado de Calamidade P√∫blica.
    Insira as informa√ß√µes abaixo para obter uma previs√£o.
    """
)

# Se√ß√£o de entrada de dados
st.header("Informa√ß√µes sobre o desastre e o munic√≠pio")

st.subheader("Danos e preju√≠zos registrados")

col1, col2 = st.columns(2)

with col1:
    dh_feridos = st.number_input('Feridos Totais', min_value=0, step=1)
    dh_enfermos = st.number_input('Enfermos Totais', min_value=0, step=1)
    dm_inst_saude_danificadas = st.number_input('Instala√ß√µes de Sa√∫de Danificadas', min_value=0, step=1)
    dm_inst_saude_destruidas = st.number_input('Instala√ß√µes de Sa√∫de Destru√≠das', min_value=0, step=1)
    dm_uni_habita_danificadas = st.number_input('Unidades Habitacionais Danificadas', min_value=0, step=1)
    dm_uni_habita_destruidas = st.number_input('Unidades Habitacionais Destru√≠das', min_value=0, step=1)

with col2:
    dm_inst_ensino_danificadas = st.number_input('Instala√ß√µes de Ensino Danificadas', min_value=0, step=1)
    dm_inst_ensino_destruidas = st.number_input('Instala√ß√µes de Ensino Destru√≠das', min_value=0, step=1)
    dm_obras_infra_danificadas = st.number_input('Obras de Infraestrutura Danificadas', min_value=0, step=1)
    dm_obras_infra_destruidas = st.number_input('Obras de Infraestrutura Destru√≠das', min_value=0, step=1)
    pepr_comercio = st.number_input('Preju√≠zos no Com√©rcio (R$)', min_value=0, step=1)
    pepr_agricultura = st.number_input('Preju√≠zos na Agricultura (R$)', min_value=0, step=1)

# Sele√ß√£o de Regi√£o e COBRADE

st.subheader("Regi√£o e classifica√ß√£o do desastre")
regiao = st.selectbox('Regi√£o', ['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN', 'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO'])
cobrade_tipo = st.selectbox('Tipo de Desastre (COBRADE)', [
    'Geol√≥gico - Terremoto - Tremor de terra (11110)',
    'Geol√≥gico - Terremoto - Tsunami (11120)',
    'Geol√≥gico - Movimento de massa - Quedas, Tombamentos e rolamentos - Blocos (11311)',
    'Geol√≥gico - Movimento de massa - Quedas, Tombamentos e rolamentos - Lascas (11312)',
    'Geol√≥gico - Movimento de massa - Quedas, Tombamentos e rolamentos - Matac√µes (11313)',
    'Geol√≥gico - Movimento de massa - Quedas, Tombamentos e rolamentos - Lajes (11314)',
    'Geol√≥gico - Movimento de massa - Deslizamentos - Deslizamentos de solo e ou rocha (11321)',
    'Geol√≥gico - Movimento de massa - Corridas de Massa - Solo/Lama (11331)',
    'Geol√≥gico - Movimento de massa - Corridas de Massa - Rocha/Detrito (11332)',
    'Geol√≥gico - Movimento de massa - Subsid√™ncias e colapsos (11340)',
    'Geol√≥gico - Eros√£o - Eros√£o Costeira/Marinha (11410)',
    'Geol√≥gico - Eros√£o - Eros√£o de Margem Fluvial (11420)',
    'Geol√≥gico - Eros√£o - Eros√£o Continental - Laminar (11431)',
    'Geol√≥gico - Eros√£o - Eros√£o Continental - Ravinas (11432)',
    'Geol√≥gico - Eros√£o - Eros√£o Continental - Bo√ßorocas (11433)',
    'Hidrol√≥gico - Inunda√ß√µes (12100)',
    'Hidrol√≥gico - Enxurradas (12200)',
    'Hidrol√≥gico - Alagamentos (12300)',
    'Meteorol√≥gico - Sistemas de Grande Escala/Escala Regional - Ciclones - Ventos Costeiros (Mobilidade de Dunas) (13111)',
    'Meteorol√≥gico - Sistemas de Grande Escala/Escala Regional - Ciclones - Mar√©s de Tempestade (Ressacas) (13112)',
    'Meteorol√≥gico - Sistemas de Grande Escala/Escala Regional - Frentes Frias/Zonas de Converg√™ncia (13120)',
    'Meteorol√≥gico - Tempestades - Tempestade Local/Convectiva - Tornados (13211)',
    'Meteorol√≥gico - Tempestades - Tempestade Local/Convectiva - Tempestade de Raios (13212)',
    'Meteorol√≥gico - Tempestades - Tempestade Local/Convectiva - Granizo (13213)',
    'Meteorol√≥gico - Tempestades - Tempestade Local/Convectiva - Chuvas Intensas (13214)',
    'Meteorol√≥gico - Tempestades - Tempestade Local/Convectiva - Vendaval (13215)',
    'Meteorol√≥gico - Temperaturas Extremas - Onda de Calor (13310)',
    'Meteorol√≥gico - Temperaturas Extremas - Onda de Frio - Friagem (13321)',
    'Meteorol√≥gico - Temperaturas Extremas - Onda de Frio - Geadas (13322)',
    'Climatol√≥gico - Seca - Estiagem (14110)',
    'Climatol√≥gico - Seca - Seca (14120)',
    'Climatol√≥gico - Seca - Inc√™ndio Florestal - Inc√™ndios em Parques, √Åreas de Prote√ß√£o Ambiental e √Åreas de Preserva√ß√£o Permanente (14131)',
    'Climatol√≥gico - Seca - Inc√™ndio Florestal - Inc√™ndios em √°reas n√£o protegidas, com reflexos na qualidade do ar (14132)',
    'Climatol√≥gico - Seca - Baixa Umidade do Ar (14140)',
    'Biol√≥gico - Epidemias - Doen√ßas infecciosas virais (15110)',
    'Biol√≥gico - Epidemias - Doen√ßas infecciosas bacterianas (15120)',
    'Biol√≥gico - Epidemias - Doen√ßas infecciosas paras√≠ticas (15130)',
    'Biol√≥gico - Epidemias - Doen√ßas infecciosas f√∫ngicas (15140)',
    'Biol√≥gico - Infesta√ß√µes/Pragas - Infesta√ß√µes de animais (15210)',
    'Biol√≥gico - Infesta√ß√µes/Pragas - Outras Infesta√ß√µes (15230)',
    'Produtos Perigosos - Desastres relacionados √† contamina√ß√£o da √°gua - Libera√ß√£o de produtos qu√≠micos nos sistemas de √°gua pot√°vel (22210)',
    'Produtos Perigosos - Desastres relacionados √† contamina√ß√£o da √°gua - Derramamento de produtos qu√≠micos em ambiente lacustre, fluvial, marinho e aqu√≠feros (22220)',
    'Produtos Perigosos - Inc√™ndios Urbanos - Inc√™ndios em aglomerados residenciais (23120)',
    'Obras Civis - Colapso de edifica√ß√µes (24100)',
    'Obras Civis - Rompimento/colapso de barragens (24200)',
    'Transporte de Passageiros e Cargas - Transporte rodovi√°rio (25100)',
    'Transporte de Passageiros e Cargas - Transporte aquavi√°rio (25500)'
])

# Verificar se o usu√°rio selecionou algo
if cobrade_tipo:
    cobrade = cobrade_tipo.split('(')[-1][:-1]
else:
    st.error("Por favor, selecione um tipo de desastre v√°lido.")

# Converter as vari√°veis categ√≥ricas em dummies
dados = {
    'DH_FERIDOS': [dh_feridos],
    'DH_ENFERMOS': [dh_enfermos],
    'DM_Inst Sa√∫de Danificadas': [dm_inst_saude_danificadas],
    'DM_Inst Sa√∫de Destruidas': [dm_inst_saude_destruidas],
    'DM_Inst Ensino Danificadas': [dm_inst_ensino_danificadas],
    'DM_Inst Ensino Destruidas': [dm_inst_ensino_destruidas],
    'DM_Uni Habita Danificadas': [dm_uni_habita_danificadas],
    'DM_Uni Habita Destruidas': [dm_uni_habita_destruidas],
    'DM_Obras de Infra Danificadas': [dm_obras_infra_danificadas],
    'DM_Obras de Infra Destruidas': [dm_obras_infra_destruidas],
    'PEPR_Com√©rcio (R$)': [pepr_comercio],
    'PEPR_Agricultura (R$)': [pepr_agricultura],
    f'Sigla_UF_{regiao}': [1],
    f'COBRADE_{cobrade}': [1] if cobrade_tipo else [0]
}

# Criar DataFrame
df_dados = pd.DataFrame(dados)

# Preencher colunas faltantes com 0
for coluna in colunas_modelo:
    if coluna not in df_dados.columns:
        df_dados[coluna] = 0

df_dados = df_dados[colunas_modelo]

st.write("Entrada do modelo:")
st.write(df_dados)

# Prever com base nos dados fornecidos
if st.button('Prever'):
    if modelo is not None:
        try:
            predicao = modelo.predict(df_dados)
            if predicao == 1:
                resultado = 'Reconhecido'
                st.success(f'A previs√£o para o desastre declarado √©: {resultado}')
            else:
                resultado = 'N√£o reconhecido'
                st.error(f'A previs√£o para o desastre declarado √©: {resultado}')
        except ValueError as e:
            st.error(f"Erro ao prever: {str(e)}")
    else:
        st.error('N√£o foi poss√≠vel carregar o modelo. Verifique a conex√£o ou o link.')
