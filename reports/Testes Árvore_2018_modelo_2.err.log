Traceback (most recent call last):
  File "/Users/brunamoura/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/brunamoura/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/brunamoura/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/brunamoura/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/brunamoura/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/brunamoura/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/brunamoura/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from imblearn.over_sampling import SMOTE
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.impute import SimpleImputer

# Dividir o dataset em conjuntos de treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)

# Imputar valores ausentes usando a estratÃ©gia 'mean' (mÃ©dia)
imputer = SimpleImputer(strategy='mean') # ou outra estratÃ©gia como 'median', 'most_frequent' etc.

# Ajustar e transformar os dados de treino
X_train_imputed = imputer.fit_transform(X_train)

# Transformar os dados de teste usando o imputer ajustado
X_test_imputed = imputer.transform(X_test)

# Aplicar SMOTE para balancear o conjunto de treino com os dados imputados
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[25], line 21[0m
[1;32m     19[0m [38;5;66;03m# Aplicar SMOTE para balancear o conjunto de treino com os dados imputados[39;00m
[1;32m     20[0m smote [38;5;241m=[39m SMOTE(random_state[38;5;241m=[39m[38;5;241m42[39m)
[0;32m---> 21[0m X_train_resampled, y_train_resampled [38;5;241m=[39m [43msmote[49m[38;5;241;43m.[39;49m[43mfit_resample[49m[43m([49m[43mX_train[49m[43m,[49m[43m [49m[43my_train[49m[43m)[49m

File [0;32m~/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/imblearn/base.py:208[0m, in [0;36mBaseSampler.fit_resample[0;34m(self, X, y)[0m
[1;32m    187[0m [38;5;250m[39m[38;5;124;03m"""Resample the dataset.[39;00m
[1;32m    188[0m 
[1;32m    189[0m [38;5;124;03mParameters[39;00m
[0;32m   (...)[0m
[1;32m    205[0m [38;5;124;03m    The corresponding label of `X_resampled`.[39;00m
[1;32m    206[0m [38;5;124;03m"""[39;00m
[1;32m    207[0m [38;5;28mself[39m[38;5;241m.[39m_validate_params()
[0;32m--> 208[0m [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mfit_resample[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m)[49m

File [0;32m~/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/imblearn/base.py:106[0m, in [0;36mSamplerMixin.fit_resample[0;34m(self, X, y)[0m
[1;32m    104[0m check_classification_targets(y)
[1;32m    105[0m arrays_transformer [38;5;241m=[39m ArraysTransformer(X, y)
[0;32m--> 106[0m X, y, binarize_y [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_check_X_y[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m)[49m
[1;32m    108[0m [38;5;28mself[39m[38;5;241m.[39msampling_strategy_ [38;5;241m=[39m check_sampling_strategy(
[1;32m    109[0m     [38;5;28mself[39m[38;5;241m.[39msampling_strategy, y, [38;5;28mself[39m[38;5;241m.[39m_sampling_type
[1;32m    110[0m )
[1;32m    112[0m output [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_fit_resample(X, y)

File [0;32m~/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/imblearn/base.py:161[0m, in [0;36mBaseSampler._check_X_y[0;34m(self, X, y, accept_sparse)[0m
[1;32m    159[0m     accept_sparse [38;5;241m=[39m [[38;5;124m"[39m[38;5;124mcsr[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mcsc[39m[38;5;124m"[39m]
[1;32m    160[0m y, binarize_y [38;5;241m=[39m check_target_type(y, indicate_one_vs_all[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[0;32m--> 161[0m X, y [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_data[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43mreset[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[43maccept_sparse[49m[43m)[49m
[1;32m    162[0m [38;5;28;01mreturn[39;00m X, y, binarize_y

File [0;32m~/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/sklearn/base.py:650[0m, in [0;36mBaseEstimator._validate_data[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)[0m
[1;32m    648[0m         y [38;5;241m=[39m check_array(y, input_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124my[39m[38;5;124m"[39m, [38;5;241m*[39m[38;5;241m*[39mcheck_y_params)
[1;32m    649[0m     [38;5;28;01melse[39;00m:
[0;32m--> 650[0m         X, y [38;5;241m=[39m [43mcheck_X_y[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mcheck_params[49m[43m)[49m
[1;32m    651[0m     out [38;5;241m=[39m X, y
[1;32m    653[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m no_val_X [38;5;129;01mand[39;00m check_params[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mensure_2d[39m[38;5;124m"[39m, [38;5;28;01mTrue[39;00m):

File [0;32m~/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/sklearn/utils/validation.py:1301[0m, in [0;36mcheck_X_y[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)[0m
[1;32m   1296[0m         estimator_name [38;5;241m=[39m _check_estimator_name(estimator)
[1;32m   1297[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1298[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mestimator_name[38;5;132;01m}[39;00m[38;5;124m requires y to be passed, but the target y is None[39m[38;5;124m"[39m
[1;32m   1299[0m     )
[0;32m-> 1301[0m X [38;5;241m=[39m [43mcheck_array[49m[43m([49m
[1;32m   1302[0m [43m    [49m[43mX[49m[43m,[49m
[1;32m   1303[0m [43m    [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[43maccept_sparse[49m[43m,[49m
[1;32m   1304[0m [43m    [49m[43maccept_large_sparse[49m[38;5;241;43m=[39;49m[43maccept_large_sparse[49m[43m,[49m
[1;32m   1305[0m [43m    [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m
[1;32m   1306[0m [43m    [49m[43morder[49m[38;5;241;43m=[39;49m[43morder[49m[43m,[49m
[1;32m   1307[0m [43m    [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m
[1;32m   1308[0m [43m    [49m[43mforce_writeable[49m[38;5;241;43m=[39;49m[43mforce_writeable[49m[43m,[49m
[1;32m   1309[0m [43m    [49m[43mforce_all_finite[49m[38;5;241;43m=[39;49m[43mforce_all_finite[49m[43m,[49m
[1;32m   1310[0m [43m    [49m[43mensure_2d[49m[38;5;241;43m=[39;49m[43mensure_2d[49m[43m,[49m
[1;32m   1311[0m [43m    [49m[43mallow_nd[49m[38;5;241;43m=[39;49m[43mallow_nd[49m[43m,[49m
[1;32m   1312[0m [43m    [49m[43mensure_min_samples[49m[38;5;241;43m=[39;49m[43mensure_min_samples[49m[43m,[49m
[1;32m   1313[0m [43m    [49m[43mensure_min_features[49m[38;5;241;43m=[39;49m[43mensure_min_features[49m[43m,[49m
[1;32m   1314[0m [43m    [49m[43mestimator[49m[38;5;241;43m=[39;49m[43mestimator[49m[43m,[49m
[1;32m   1315[0m [43m    [49m[43minput_name[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mX[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m   1316[0m [43m[49m[43m)[49m
[1;32m   1318[0m y [38;5;241m=[39m _check_y(y, multi_output[38;5;241m=[39mmulti_output, y_numeric[38;5;241m=[39my_numeric, estimator[38;5;241m=[39mestimator)
[1;32m   1320[0m check_consistent_length(X, y)

File [0;32m~/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/sklearn/utils/validation.py:1064[0m, in [0;36mcheck_array[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)[0m
[1;32m   1058[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1059[0m         [38;5;124m"[39m[38;5;124mFound array with dim [39m[38;5;132;01m%d[39;00m[38;5;124m. [39m[38;5;132;01m%s[39;00m[38;5;124m expected <= 2.[39m[38;5;124m"[39m
[1;32m   1060[0m         [38;5;241m%[39m (array[38;5;241m.[39mndim, estimator_name)
[1;32m   1061[0m     )
[1;32m   1063[0m [38;5;28;01mif[39;00m force_all_finite:
[0;32m-> 1064[0m     [43m_assert_all_finite[49m[43m([49m
[1;32m   1065[0m [43m        [49m[43marray[49m[43m,[49m
[1;32m   1066[0m [43m        [49m[43minput_name[49m[38;5;241;43m=[39;49m[43minput_name[49m[43m,[49m
[1;32m   1067[0m [43m        [49m[43mestimator_name[49m[38;5;241;43m=[39;49m[43mestimator_name[49m[43m,[49m
[1;32m   1068[0m [43m        [49m[43mallow_nan[49m[38;5;241;43m=[39;49m[43mforce_all_finite[49m[43m [49m[38;5;241;43m==[39;49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mallow-nan[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m   1069[0m [43m    [49m[43m)[49m
[1;32m   1071[0m [38;5;28;01mif[39;00m copy:
[1;32m   1072[0m     [38;5;28;01mif[39;00m _is_numpy_namespace(xp):
[1;32m   1073[0m         [38;5;66;03m# only make a copy if `array` and `array_orig` may share memory`[39;00m

File [0;32m~/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/sklearn/utils/validation.py:123[0m, in [0;36m_assert_all_finite[0;34m(X, allow_nan, msg_dtype, estimator_name, input_name)[0m
[1;32m    120[0m [38;5;28;01mif[39;00m first_pass_isfinite:
[1;32m    121[0m     [38;5;28;01mreturn[39;00m
[0;32m--> 123[0m [43m_assert_all_finite_element_wise[49m[43m([49m
[1;32m    124[0m [43m    [49m[43mX[49m[43m,[49m
[1;32m    125[0m [43m    [49m[43mxp[49m[38;5;241;43m=[39;49m[43mxp[49m[43m,[49m
[1;32m    126[0m [43m    [49m[43mallow_nan[49m[38;5;241;43m=[39;49m[43mallow_nan[49m[43m,[49m
[1;32m    127[0m [43m    [49m[43mmsg_dtype[49m[38;5;241;43m=[39;49m[43mmsg_dtype[49m[43m,[49m
[1;32m    128[0m [43m    [49m[43mestimator_name[49m[38;5;241;43m=[39;49m[43mestimator_name[49m[43m,[49m
[1;32m    129[0m [43m    [49m[43minput_name[49m[38;5;241;43m=[39;49m[43minput_name[49m[43m,[49m
[1;32m    130[0m [43m[49m[43m)[49m

File [0;32m~/PrevisorReconhecimento/.venv/lib/python3.11/site-packages/sklearn/utils/validation.py:172[0m, in [0;36m_assert_all_finite_element_wise[0;34m(X, xp, allow_nan, msg_dtype, estimator_name, input_name)[0m
[1;32m    155[0m [38;5;28;01mif[39;00m estimator_name [38;5;129;01mand[39;00m input_name [38;5;241m==[39m [38;5;124m"[39m[38;5;124mX[39m[38;5;124m"[39m [38;5;129;01mand[39;00m has_nan_error:
[1;32m    156[0m     [38;5;66;03m# Improve the error message on how to handle missing values in[39;00m
[1;32m    157[0m     [38;5;66;03m# scikit-learn.[39;00m
[1;32m    158[0m     msg_err [38;5;241m+[39m[38;5;241m=[39m (
[1;32m    159[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mestimator_name[38;5;132;01m}[39;00m[38;5;124m does not accept missing values[39m[38;5;124m"[39m
[1;32m    160[0m         [38;5;124m"[39m[38;5;124m encoded as NaN natively. For supervised learning, you might want[39m[38;5;124m"[39m
[0;32m   (...)[0m
[1;32m    170[0m         [38;5;124m"[39m[38;5;124m#estimators-that-handle-nan-values[39m[38;5;124m"[39m
[1;32m    171[0m     )
[0;32m--> 172[0m [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(msg_err)

[0;31mValueError[0m: Input X contains NaN.
SMOTE does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

